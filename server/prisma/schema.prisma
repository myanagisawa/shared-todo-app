// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  avatar    String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  authoredNotes  Note[]        @relation("NoteAuthor")
  noteUsers      NoteUser[]
  assignedTasks  Task[]        @relation("TaskAssignee")
  authoredTasks  Task[]        @relation("TaskAuthor")
  uploadedFiles  File[]
  invitations    Invitation[]  @relation("InvitedBy")
  activityLogs   ActivityLog[]

  @@map("users")
}

model Note {
  id         String   @id @default(uuid())
  title      String
  content    String?
  authorId   String
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  author      User          @relation("NoteAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  noteUsers   NoteUser[]
  tasks       Task[]
  files       File[]
  invitations Invitation[]

  @@map("notes")
}

enum TaskStatus {
  pending
  in_progress
  completed
  on_hold
}

enum TaskPriority {
  low
  medium
  high
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(pending)
  priority    TaskPriority @default(medium)
  dueDate     DateTime?
  noteId      String
  assigneeId  String?
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  note     Note  @relation(fields: [noteId], references: [id], onDelete: Cascade)
  assignee User? @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  author   User  @relation("TaskAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

enum NoteRole {
  viewer
  editor
  admin
}

model NoteUser {
  id        String   @id @default(uuid())
  noteId    String
  userId    String
  role      NoteRole @default(viewer)
  createdAt DateTime @default(now())

  // Relations
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
  @@map("note_users")
}

model File {
  id           String   @id @default(uuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  noteId       String?
  uploadedById String
  createdAt    DateTime @default(now())

  // Relations
  note       Note? @relation(fields: [noteId], references: [id], onDelete: Cascade)
  uploadedBy User  @relation(fields: [uploadedById], references: [id], onDelete: Cascade)

  @@map("files")
}

model Invitation {
  id          String   @id @default(uuid())
  email       String
  noteId      String
  invitedById String
  role        NoteRole @default(viewer)
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  note      Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  invitedBy User @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model ActivityLog {
  id           String   @id @default(uuid())
  userId       String
  action       String
  resourceType String
  resourceId   String
  details      Json?
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}